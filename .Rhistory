)
tibble(
USA_skidområde = c("Tahoe", "Utah", "Colorado"),
Nybörjare = c(20, 10, 10)
)
tibble(
USA_skidområde = c("Tahoe", "Utah", "Colorado"),
Nybörjare = c(20, 10, 10),
Mellanting = c(30, 30, 40),
Avancerad = c(40, 60, 50)
)
df <- tibble(
USA_skidområde = c("Tahoe", "Utah", "Colorado"),
Nybörjare = c(20, 10, 10),
Mellanting = c(30, 30, 40),
Avancerad = c(40, 60, 50)
)
chisq.test(df)
chisq.test(df)
df <- tibble(
Nybörjare = c(20, 10, 10),
Mellanting = c(30, 30, 40),
Avancerad = c(40, 60, 50)
)
rownames(df)
rownames(df) <- c("Tahoe", "Utah", "Colorado")
rownames(df) <- c("Tahoe", "Utah", "Colorado")
chisq.test(df)
df <- tibble(
Nybörjare = c(20, 10, 10),
Mellanting = c(30, 30, 40),
Avancerad = c(40, 60, 50)
)
chisq.test(df)
chisq.test(df)
return_section(mtcars, am)
table(dataset[var]) |>
knitr::kable()
create_table <- function(dataset, var){
table(dataset[var]) |>
knitr::kable()
}
create_table <- function(dataset, var){
table(dataset[var]) |>
knitr::kable()
}
The function above uses the `table()` function to create
```{r}
create_table(mtcars, "am")
create_table(mtcars, "am")
Let’s suppose that we want to generate a document that would
- first a section title, with the name of the variable of interest
So it would look like this:
## Frequency table for variable: "am"
```{r}
create_table(mtcars, "am")
create_table(mtcars, "am")
We don’t want to create these sections for
Instead, we can define a function that
```{r}
return_section <- function(dataset, var){
a <- knitr::knit_expand(text = c(
## Frequency table for variable: {{variable}}",
create_table(dataset, var)),
variable = var)
cat(a, sep = "\n")
}
return_section <- function(dataset, var){
a <- knitr::knit_expand(text = c(
## Frequency table for variable: {{variable}}",
create_table(dataset, var)),
variable = var)
cat(a, sep = "\n")
}
return_section(mtcars, am)
return_section(mtcars, am)
cat(a, sep = "\n")
```{r}
create_table(mtcars, "am")
cat(a, sep = "\n")
return_section <- function(dataset, var){
a <- knitr::knit_expand(text = c(
## Frequency table for variable: {{variable}}",
create_table(dataset, var)),
variable = var)
cat(a, sep = "\n")
}
return_section(mtcars, am)
return_section(mtcars, am)
invisible(lapply(colnames(mtcars),
return_section,
dataset = mtcars))
invisible(lapply(colnames(mtcars),
return_section,
dataset = mtcars))
return_section <- function(dataset, var){
a <- knitr::knit_expand(text = c(
"## Frequency table for variable: {{variable}}",
create_table(dataset, var)),
variable = var)
cat(a, sep = "\n")
}
create_table <- function(dataset, var){
dataset <- get(dataset)
table(dataset[var]) |>
knitr::kable()
}
create_table(params$dataset, params$var)
knitr::opts_chunk$set(echo = TRUE)
# Run these lines to compile the document
# Set eval and echo to FALSE, so that this does not appear
# in the output, and does not get evaluated when knitting
rmarkdown::render(
input = "param_report_example.Rmd",
params = list(
dataset = "mtcars",
var = "cyl"
)
)
library(dplyr)
library(ggplot2)
library(janitor)
library(purrr)
library(readxl)
library(rvest)
library(stringr)
get_raw_data <- function(url = "https://is.gd/1vvBAc"){
raw_data <- tempfile(fileext = ".xlsx")
download.file(url,
raw_data,
mode = "wb")
sheets <- excel_sheets(raw_data)
read_clean <- function(..., sheet){
read_excel(..., sheet = sheet) %>%
mutate(year = sheet)
}
raw_data <- map_dfr(
sheets,
~read_clean(raw_data,
skip = 10,
sheet = .)) %>%
clean_names()
raw_data %>%
rename(
locality = commune,
n_offers = nombre_doffres,
average_price_nominal_euros = prix_moyen_annonce_en_courant,
average_price_m2_nominal_euros = prix_moyen_annonce_au_m2_en_courant,
average_price_m2_nominal_euros = prix_moyen_annonce_au_m2_en_courant
) %>%
mutate(locality = str_trim(locality)) %>%
select(year, locality, n_offers, starts_with("average"))
}
get_raw_data <- function(url = "https://is.gd/1vvBAc"){
raw_data <- tempfile(fileext = ".xlsx")
download.file(url,
raw_data,
mode = "wb")
sheets <- excel_sheets(raw_data)
read_clean <- function(..., sheet){
read_excel(..., sheet = sheet) %>%
mutate(year = sheet)
}
raw_data <- map_dfr(
sheets,
~read_clean(raw_data,
skip = 10,
sheet = .)) %>%
clean_names()
raw_data %>%
rename(
locality = commune,
n_offers = nombre_doffres,
average_price_nominal_euros = prix_moyen_annonce_en_courant,
average_price_m2_nominal_euros = prix_moyen_annonce_au_m2_en_courant,
average_price_m2_nominal_euros = prix_moyen_annonce_au_m2_en_courant
) %>%
mutate(locality = str_trim(locality)) %>%
select(year, locality, n_offers, starts_with("average"))
}
raw_data <- get_raw_data(url = "https://is.gd/1vvBAc")
View(raw_data)
clean_raw_data <- function(raw_data){
raw_data %>%
mutate(locality = ifelse(grepl("Luxembourg-Ville", locality),
"Luxembourg",
locality),
locality = ifelse(grepl("P.tange", locality),
"Pétange",
locality)
) %>%
filter(!grepl("Source", locality)) %>%
mutate(across(starts_with("average"), as.numeric))
}
flat_data <- clean_raw_data(raw_data)
dplyr::last_dplyr_warnings()
get_former_communes <- function(
url = "https://w.wiki/_wFe7",
min_year = 2009,
table_position = 3
){
read_html(url) %>%
html_table() %>%
pluck(table_position) %>%
clean_names() %>%
filter(year_dissolved > min_year)
}
former_communes <- get_former_communes()
get_current_communes <- function(
url = "https://w.wiki/6nPu",
table_position = 1
){
read_html(url) %>%
html_table() %>%
pluck(table_position) %>%
clean_names()
}
current_communes <- get_current_communes()
get_test_communes <- function(former_communes, current_communes){
communes <- unique(c(former_communes$name, current_communes$commune))
# we need to rename some communes
# Different spelling of these communes between wikipedia and the data
communes[which(communes == "Clemency")] <- "Clémency"
communes[which(communes == "Redange")] <- "Redange-sur-Attert"
communes[which(communes == "Erpeldange-sur-Sûre")] <- "Erpeldange"
communes[which(communes == "Luxembourg-City")] <- "Luxembourg"
communes[which(communes == "Käerjeng")] <- "Kaerjeng"
communes[which(communes == "Petange")] <- "Pétange"
communes
}
former_communes <- get_former_communes()
current_communes <- get_current_communes()
communes <- get_test_communes(former_communes, current_communes)
setdiff(flat_data$locality, communes)
former_communes <- get_former_communes()
current_communes <- get_current_communes()
communes <- get_test_communes(former_communes, current_communes)
setdiff(flat_data$locality, communes)
make_country_level_data <- function(flat_data){
country_level <- flat_data %>%
filter(grepl("nationale", locality)) %>%
select(-n_offers)
offers_country <- flat_data %>%
filter(grepl("Total d.offres", locality)) %>%
select(year, n_offers)
full_join(country_level, offers_country) %>%
select(year, locality, n_offers, everything()) %>%
mutate(locality = "Grand-Duchy of Luxembourg")
}
country_level_data <- make_country_level_data(flat_data)
write.csv(commune_level_data,
"datasets/house_prices_commune_level_data.csv",
row.names = FALSE)
country_level_data <- make_country_level_data(flat_data)
make_commune_level_data <- function(flat_data){
flat_data %>%
filter(!grepl("nationale|offres", locality),
!is.na(locality))
}
commune_level_data <- make_commune_level_data(flat_data)
write.csv(commune_level_data,
"datasets/house_prices_commune_level_data.csv",
row.names = FALSE)
library(dplyr)
library(ggplot2)
library(janitor)
library(purrr)
library(readxl)
library(rvest)
library(stringr)
get_raw_data <- function(url = "https://data.public.lu/fr/datasets/r/14b0156e-ff87-4a36-a867-933fc9a6f903"){
raw_data <- tempfile(fileext = ".xlsx")
download.file(url,
raw_data,
mode = "wb") # for compatibility with Windows
sheets <- excel_sheets(raw_data)
read_clean <- function(..., sheet){
read_excel(..., sheet = sheet) %>%
mutate(year = sheet)
}
raw_data <- map_dfr(sheets,
~read_clean(raw_data,
skip = 10,
sheet = .)) %>%
clean_names()
raw_data %>%
rename(locality = commune,
n_offers = nombre_doffres,
average_price_nominal_euros = prix_moyen_annonce_en_courant,
average_price_m2_nominal_euros = prix_moyen_annonce_au_m2_en_courant,
average_price_m2_nominal_euros = prix_moyen_annonce_au_m2_en_courant
) %>%
mutate(locality = str_trim(locality)) %>%
select(year, locality, n_offers, starts_with("average"))
}
get_raw_data <- function(url = "https://data.public.lu/fr/datasets/r/14b0156e-ff87-4a36-a867-933fc9a6f903"){
raw_data <- tempfile(fileext = ".xlsx")
download.file(url,
raw_data,
mode = "wb") # for compatibility with Windows
sheets <- excel_sheets(raw_data)
read_clean <- function(..., sheet){
read_excel(..., sheet = sheet) %>%
mutate(year = sheet)
}
raw_data <- map_dfr(sheets,
~read_clean(raw_data,
skip = 10,
sheet = .)) %>%
clean_names()
raw_data %>%
rename(locality = commune,
n_offers = nombre_doffres,
average_price_nominal_euros = prix_moyen_annonce_en_courant,
average_price_m2_nominal_euros = prix_moyen_annonce_au_m2_en_courant,
average_price_m2_nominal_euros = prix_moyen_annonce_au_m2_en_courant
) %>%
mutate(locality = str_trim(locality)) %>%
select(year, locality, n_offers, starts_with("average"))
}
raw_data <- get_raw_data(url = "https://github.com/b-rodrigues/rap4all/raw/master/datasets/vente-maison-2010-2021.xlsx")
clean_raw_data <- function(raw_data){
raw_data %>%
mutate(locality = ifelse(grepl("Luxembourg-Ville", locality),
"Luxembourg",
locality),
locality = ifelse(grepl("P.tange", locality),
"Pétange",
locality)
) %>%
filter(!grepl("Source", locality)) %>%
mutate(across(starts_with("average"), as.numeric))
}
flat_data <- clean_raw_data(raw_data)
get_former_communes <- function(url = "https://en.wikipedia.org/wiki/Communes_of_Luxembourg#Former_communes",
min_year = 2009,
table_position = 3){
read_html(url) %>%
html_table() %>%
pluck(table_position) %>%
clean_names() %>%
filter(year_dissolved > min_year)
}
former_communes <- get_former_communes()
get_current_communes <- function(url = "https://en.wikipedia.org/wiki/List_of_communes_of_Luxembourg",
table_position = 1){
read_html(url) %>%
html_table() %>%
pluck(table_position) %>%
clean_names()
}
current_communes <- get_current_communes()
get_test_communes <- function(former_communes, current_communes){
communes <- unique(c(former_communes$name, current_communes$commune))
# we need to rename some communes
# Different spelling of these communes between wikipedia and the data
communes[which(communes == "Clemency")] <- "Clémency"
communes[which(communes == "Redange")] <- "Redange-sur-Attert"
communes[which(communes == "Erpeldange-sur-Sûre")] <- "Erpeldange"
communes[which(communes == "Luxembourg-City")] <- "Luxembourg"
communes[which(communes == "Käerjeng")] <- "Kaerjeng"
communes[which(communes == "Petange")] <- "Pétange"
communes
}
former_communes <- get_former_communes()
current_communes <- get_current_communes()
communes <- get_test_communes(former_communes, current_communes)
setdiff(flat_data$locality, communes)
make_country_level_data <- function(flat_data){
country_level <- flat_data %>%
filter(grepl("nationale", locality)) %>%
select(-n_offers)
offers_country <- flat_data %>%
filter(grepl("Total d.offres", locality)) %>%
select(year, n_offers)
full_join(country_level, offers_country) %>%
select(year, locality, n_offers, everything()) %>%
mutate(locality = "Grand-Duchy of Luxembourg")
}
country_level_data <- make_country_level_data(flat_data)
make_commune_level_data <- function(flat_data){
flat_data %>%
filter(!grepl("nationale|offres", locality),
!is.na(locality))
}
commune_level_data <- make_commune_level_data(flat_data)
write.csv(commune_level_data,
"datasets/house_prices_commune_level_data.csv",
row.names = FALSE)
setwd("C:/Users/permi/housing")
write.csv(commune_level_data,
"datasets/house_prices_commune_level_data.csv",
row.names = FALSE)
write.csv(commune_level_data,
"datasets/house_prices_commune_level_data.csv",
row.names = FALSE)
write.csv(country_level_data,
"datasets/house_prices_country_level_data.csv",
row.names = FALSE)
deparse(commune_level_data)
deparse(substitute(commune_level_data))
deparse(substitute(commune_level_data))
## R Markdown
deparse(substitute(commune_level_data))
typeof(substitute(commune_level_data))
typeof(substitute(deparse(substitute(commune_level_data)))
)
?quo
View(commune_level_data)
source("~/.active-rstudio-document", echo=TRUE)
library(dplyr)
library(ggplot2)
library(purrr)
library(tidyr)
commune_level_data <- read.csv(
"../datasets/house_prices_commune_level_data.csv"
)
commune_level_data <- read.csv(
"/datasets/house_prices_commune_level_data.csv"
)
commune_level_data <- read.csv(
"datasets/house_prices_commune_level_data.csv"
)
country_level_data <- read.csv(
"datasets/house_prices_country_level_data.csv"
)
library(dplyr)
library(ggplot2)
library(purrr)
library(tidyr)
commune_level_data <- read.csv(
"datasets/house_prices_commune_level_data.csv"
)
country_level_data <- read.csv(
"datasets/house_prices_country_level_data.csv"
)
get_laspeyeres <- function(dataset){
which_dataset <- deparse(substitute(dataset))
group_var <- if(grepl("commune", which_dataset)){
quo(locality)
} else {
NULL
}
dataset %>%
group_by(!!group_var) %>%
mutate(p0 = ifelse(year == "2010", average_price_nominal_euros, NA)) %>%
fill(p0, .direction = "down") %>%
mutate(p0_m2 = ifelse(year == "2010", average_price_m2_nominal_euros, NA)) %>%
fill(p0_m2, .direction = "down") %>%
ungroup() %>%
mutate(pl = average_price_nominal_euros/p0*100,
pl_m2 = average_price_m2_nominal_euros/p0_m2*100)
}
commune_level_data <- get_laspeyeres(commune_level_data)
country_level_data <- get_laspeyeres(country_level_data)
communes <- c("Luxembourg",
"Esch-sur-Alzette",
"Mamer",
"Schengen",
"Wincrange")
make_plot <- function(commune){
commune_data <- commune_level_data %>%
filter(locality == commune)
data_to_plot <- bind_rows(
country_level_data,
commune_data
)
ggplot(data_to_plot) +
geom_line(aes(y = pl_m2,
x = year,
group = locality,
colour = locality))
}
res <- lapply(communes, function(x){
knitr::knit_child(text = c(
'\n',
'## Plot for commune: `r x`',
'\n',
'```{r, echo = FALSE}',
'print(make_plot(x))',
'```'
),
envir = environment(),
quiet = TRUE)
})
res <- lapply(communes, function(x){
knitr::knit_child(text = c(
'\n',
'## Plot for commune: `r x`',
'\n',
'```{r, echo = FALSE}',
'print(make_plot(x))',
'```'
),
envir = environment(),
quiet = TRUE)
})
res <- lapply(communes, function(x){
knitr::knit_child(text = c(
'\n',
'## Plot for commune: `r x`',
'\n',
'```{r, echo = FALSE}',
'print(make_plot(x))',
'```'
),
envir = environment(),
quiet = TRUE)
})
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
