fill(p0_m2, .direction = "down") %>%
ungroup() %>%
mutate(pl = average_price_nominal_euros/p0*100,
pl_m2 = average_price_m2_nominal_euros/p0_m2*100)
country_level_data <- country_level_data %>%
mutate(p0 = ifelse(year == "2010", average_price_nominal_euros, NA)) %>%
fill(p0, .direction = "down") %>%
mutate(p0_m2 = ifelse(year == "2010", average_price_m2_nominal_euros, NA)) %>%
fill(p0_m2, .direction = "down") %>%
mutate(pl = average_price_nominal_euros/p0*100,
pl_m2 = average_price_m2_nominal_euros/p0_m2*100)
communes <- c("Luxembourg",
"Esch-sur-Alzette",
"Mamer",
"Schengen",
"Wincrange")
filtered_data <- commune_level_data %>%
filter(locality == communes[1])
data_to_plot <- bind_rows(
country_level_data,
filtered_data
)
lux_plot <- ggplot(data_to_plot) +
geom_line(aes(y = pl_m2,
x = year,
group = locality,
colour = locality))
filtered_data <- commune_level_data %>%
filter(locality == communes[2])
data_to_plot <- bind_rows(
country_level_data,
filtered_data
)
esch_plot <- ggplot(data_to_plot) +
geom_line(aes(y = pl_m2,
x = year,
group = locality,
colour = locality))
filtered_data <- commune_level_data %>%
filter(locality == communes[3])
data_to_plot <- bind_rows(
country_level_data,
filtered_data
)
mamer_plot <- ggplot(data_to_plot) +
geom_line(aes(y = pl_m2,
x = year,
group = locality,
colour = locality))
filtered_data <- commune_level_data %>%
filter(locality == communes[4])
data_to_plot <- bind_rows(
country_level_data,
filtered_data
)
schengen_plot <- ggplot(data_to_plot) +
geom_line(aes(y = pl_m2,
x = year,
group = locality,
colour = locality))
filtered_data <- commune_level_data %>%
filter(locality == communes[5])
data_to_plot <- bind_rows(
country_level_data,
filtered_data
)
wincrange_plot <- ggplot(data_to_plot) +
geom_line(aes(y = pl_m2,
x = year,
group = locality,
colour = locality))
# Let’s save the plots
ggsave("plots/lux_plot.pdf", lux_plot)
source("~/.active-rstudio-document")
ls
ls()
h <- function(name){
food <- sample(c("lasagna", "cassoulet", "feijoada"), 1)
if(exists("food_list")){
food_list <<- append(food_list, food)
} else {
food_list <<- append(list(), food)
}
print(paste0(name, " likes ", food))
}
h("Mille")
h("Mille")
h("Mille")
h("Mille")
h("Mille")
View(food_list)
h("Mille")
h <- function(name){
food <- sample(c("lasagna", "cassoulet", "feijoada"), 1)
if(exists("food_list")){
food_list <<- append(food_list, food)
} else {
food_list <<- append(list(), food)
}
print(paste0(name, " likes ", food))
}
h("Mille")
h <- function(name, food_list = list()){
food <- sample(c("lasagna", "cassoulet", "feijoada"), 1)
food_list <- append(food_list, food)
print(paste0(name, " likes ", food))
food_list
}
h("Mille")
h("Mille")
h("Mille")
h("Mille")
h <- function(name, food_list = vector()){
food <- sample(c("lasagna", "cassoulet", "feijoada"), 1)
food_list <- append(food_list, food)
print(paste0(name, " likes ", food))
food_list
}
h("Mille")
h <- function(name, food_list = list()){
food <- sample(c("lasagna", "cassoulet", "feijoada"), 1)
food_list <- append(food_list, food)
print(paste0(name, " likes ", food))
food_list
}
h("Mille")
h("Mille", food_list)
food_list
h <- function(name, food_list = list(), seed = 123){
# We set the seed, making sure that we get
# the same selection of food for a given seed
set.seed(seed)
food <- sample(c("lasagna", "cassoulet", "feijoada"), 1)
# We now need to unset the seed, because
# if we don't, guess what, the seed will
# stay set for the whole session!
set.seed(NULL)
food_list <- append(food_list, food)
print(paste0(name, " likes ", food))
food_list
}
h("Mille")
h("Mille")
h("Mille")
h("Mille")
bad <- function(x){
x + y
}
bad()
bad(a)
bad(a10
bad(10)
bad(10)
bad <- function(x){
x + y
}
bad(10)
y <- 10
bad <- function(x){
x + y
}
bad(5)
y <- 10
bad <- function(x, y){
x + y
}
bad(5)
bad(5, 10)
w <- function(...){
paste0("First argument: ", ..1,
", second argument: ", ..2,
", last argument: ", ..3)
}
w(1, 2, 3)
w(5, 2, 3)
paste0("First argument: ", ..2,
", second argument: ", ..1,
", last argument: ", ..3)
w <- function(...){
paste0("First argument: ", ..2,
", second argument: ", ..1,
", last argument: ", ..3)
}
w(5, 2, 3)
w <- function(...){
paste0("First argument: ", ..2,
", second argument: ", ..1,
", last argument: ", ..3)
}
w(1, 2, 3)
strictly <- function(f){
function(...){
tryCatch({
f(...)
},
warning = function(warning)stop("Can't do that chief"))
}
}
strictly <- function(f){
function(...){
tryCatch({
f(...)
},
warning = function(warning)stop("Can't do that chief"))
}
}
s_sqrt <- strictly(sqrt)
s_sqrt(-4)
s_sqrt <- strictly(sqrt)
s_sqrt(-4)
s_sqrt <- chronicler::record(sqrt)
install.packages('chronicler')
s_sqrt <- chronicler::record(sqrt)
result <- s_sqrt(-4)
result
chronicler::read_log(result)
sqrt_newton <- function(a,
init = 1,
eps = 0.01,
steps = 1){
stopifnot(a >= 0)
while(abs(init**2 - a) > eps){
init <- 1/2 *(init + a/init)
steps <- steps + 1
}
list(
"result" = init,
"steps" = steps
)
}
result_list <- sqrt_newton(1600)
result_list
result <- result_list$result
result_steps <- result_list$steps
f <- function(result_list){
list(
"result" = result_list$result * 10,
"steps" = result_list$steps + 1
)
}
f(result_list)
list(
"a" = head(mtcars),
"b" = ~lm(y ~ x)
)
list(
"a" = head(mtcars),
"b" = list(
"c" = sqrt,
"d" = my_plot # Remember this ggplot object from before?
)
)
looping <- function(a_list, a_func, init = NULL, ...){
# If the user does not provide an `init` value,
# set the head of the list as the initial value
if(is.null(init)){
init <- a_list[[1]]
a_list <- tail(a_list, -1)
}
# Separate the head from the tail of the list
# and apply the function to the initial value and the head of the list
head_list = a_list[[1]]
tail_list = tail(a_list, -1)
init = a_func(init, head_list, ...)
# Check if we're done: if there is still some tail,
# rerun the whole thing until there's no tail left
if(length(tail_list) != 0){
looping(tail_list, a_func, init, ...)
}
else {
init
}
}
looping(as.list(seq(1, 100)), `+`)
Reduce(`+`, seq(1, 100)) # the order of the arguments is `function` then `list` for `Reduce()`
applying <- function(a_list, a_func, ...){
head_list = a_list[[1]]
tail_list = tail(a_list, -1)
result = a_func(head_list, ...)
# Check if we're done: if there is still some tail, rerun the whole thing until there's no tail left
if(length(tail_list) != 0){
append(result, applying(tail_list, a_func, ...))
}
else {
result
}
}
applying(as.list(seq(1, 5)), sqrt)
lapply(list(seq(1, 5)), sqrt)
labbly(iris, class)
lapply(iris, class)
# Create a temporary file
unemp_path <- tempfile(fileext = ".rda")
# Download the data and save it to the path of the temporary file
# avoids having to install the package from Github
download.file(
"https://is.gd/l57cNX",
destfile = unemp_path)
# Load the data. The data is now available as 'unemp'
load(unemp_path)
# Download the data and save it to the path of the temporary file
# avoids having to install the package from Github
download.file(
"https://is.gd/l57cNX",
destfile = unemp_path)
# Load the data. The data is now available as 'unemp'
load(unemp_path)
library(dplyr)
library(purrr)
library(ggplot2)
library(tidyr)
glimpse(unemp)
# Load the data. The data is now available as 'unemp'
unemp <- load(unemp_path)
?Negate
local({
a <- 2
})
exists("a")
h <- function(name, food_list = list()){
food <- sample(c("lasagna", "cassoulet", "feijoada"), 1)
food_list <- append(food_list, food)
print(paste0(name, " likes ", food))
food_list
}
h()
h("Mille")
h2 <- function(name, food_list = list(), seed = 123){
# We set the seed, making sure that we get the same selection of food for a given seed
set.seed(seed)
food <- sample(c("lasagna", "cassoulet", "feijoada"), 1)
# We now need to unset the seed, because if we don't, guess what, the seed will stay set for the whole session!
set.seed(NULL)
food_list <- append(food_list, food)
print(paste0(name, " likes ", food))
food_list
}
h("Mille")
withr::with_seed(seed = 123,
h("Bruno"))
withr
library(withr)
withr::with_seed(seed = 123,
h("Bruno"))
h3 <- function(..., seed){
withr::with_seed(seed = seed,
h(...))
}
h3("Micke g")
h3("Micke g", seed = 123)
withr::with_tempfile("unemp", {
download.file(
"https://is.gd/l57cNX",
destfile = unemp)
load(unemp)
nrow(unemp)
}
)
tibble::tribble(
~`x.(antal.storkar).Y.(antal.barn)`,
"5 25",
"3 20",
"4 21",
"10 35",
"15 38"
)
tibble::tribble(
~x, ~ Y,
"5 25",
"3 20",
"4 21",
"10 35",
"15 38"
)
storkar <- c(5, 3, 4, 10, 15)
barn <- c(25, 20, 21, 35, 38)
cor(storkar, barn)
cor(barn, storkar)
tibble(
USA_skidområde = c("Tahoe", "Utah", "Colorado")
)
tibble(
USA_skidområde = c("Tahoe", "Utah", "Colorado")
)
library(tidyverse)
tibble(
USA_skidområde = c("Tahoe", "Utah", "Colorado")
)
tibble(
USA_skidområde = c("Tahoe", "Utah", "Colorado"),
Nybörjare = c(20, 10, 10)
)
tibble(
USA_skidområde = c("Tahoe", "Utah", "Colorado"),
Nybörjare = c(20, 10, 10),
Mellanting = c(30, 30, 40),
Avancerad = c(40, 60, 50)
)
df <- tibble(
USA_skidområde = c("Tahoe", "Utah", "Colorado"),
Nybörjare = c(20, 10, 10),
Mellanting = c(30, 30, 40),
Avancerad = c(40, 60, 50)
)
chisq.test(df)
chisq.test(df)
df <- tibble(
Nybörjare = c(20, 10, 10),
Mellanting = c(30, 30, 40),
Avancerad = c(40, 60, 50)
)
rownames(df)
rownames(df) <- c("Tahoe", "Utah", "Colorado")
rownames(df) <- c("Tahoe", "Utah", "Colorado")
chisq.test(df)
df <- tibble(
Nybörjare = c(20, 10, 10),
Mellanting = c(30, 30, 40),
Avancerad = c(40, 60, 50)
)
chisq.test(df)
chisq.test(df)
return_section(mtcars, am)
table(dataset[var]) |>
knitr::kable()
create_table <- function(dataset, var){
table(dataset[var]) |>
knitr::kable()
}
create_table <- function(dataset, var){
table(dataset[var]) |>
knitr::kable()
}
The function above uses the `table()` function to create
```{r}
create_table(mtcars, "am")
create_table(mtcars, "am")
Let’s suppose that we want to generate a document that would
- first a section title, with the name of the variable of interest
So it would look like this:
## Frequency table for variable: "am"
```{r}
create_table(mtcars, "am")
create_table(mtcars, "am")
We don’t want to create these sections for
Instead, we can define a function that
```{r}
return_section <- function(dataset, var){
a <- knitr::knit_expand(text = c(
## Frequency table for variable: {{variable}}",
create_table(dataset, var)),
variable = var)
cat(a, sep = "\n")
}
return_section <- function(dataset, var){
a <- knitr::knit_expand(text = c(
## Frequency table for variable: {{variable}}",
create_table(dataset, var)),
variable = var)
cat(a, sep = "\n")
}
return_section(mtcars, am)
return_section(mtcars, am)
cat(a, sep = "\n")
```{r}
create_table(mtcars, "am")
cat(a, sep = "\n")
return_section <- function(dataset, var){
a <- knitr::knit_expand(text = c(
## Frequency table for variable: {{variable}}",
create_table(dataset, var)),
variable = var)
cat(a, sep = "\n")
}
return_section(mtcars, am)
return_section(mtcars, am)
invisible(lapply(colnames(mtcars),
return_section,
dataset = mtcars))
invisible(lapply(colnames(mtcars),
return_section,
dataset = mtcars))
return_section <- function(dataset, var){
a <- knitr::knit_expand(text = c(
"## Frequency table for variable: {{variable}}",
create_table(dataset, var)),
variable = var)
cat(a, sep = "\n")
}
create_table <- function(dataset, var){
dataset <- get(dataset)
table(dataset[var]) |>
knitr::kable()
}
create_table(params$dataset, params$var)
knitr::opts_chunk$set(echo = TRUE)
# Run these lines to compile the document
# Set eval and echo to FALSE, so that this does not appear
# in the output, and does not get evaluated when knitting
rmarkdown::render(
input = "param_report_example.Rmd",
params = list(
dataset = "mtcars",
var = "cyl"
)
)
setwd("C:/Users/permi/housing")
renv:restore()
renv::restore()
renv::restore()
renv::restore()
Y
